<?php
namespace ls\models\forms;

/**
 * Class GlobalSettings
 * This class uses the settingglobal model to save its settings.
 * @package ls\models\forms
 */
class Settings extends \CFormModel
{
    /**
     * These are on the general tab.
     */
    public $sitename;
    public $defaulttemplate;
    public $admintheme;
    public $defaulthtmleditormode;
    public $defaultquestionselectormode;
    public $defaulttemplateeditormode;
    public $GeoNamesUsername;
    public $googleMapsAPIKey;
    public $ipInfoDbAPIKey;
    public $googleanalyticsapikey;
    public $googletranslateapikey;
    public $iSessionExpirationTime;

    /**
     * These are on the email tab.
     */
    public $siteadminemail;
    public $siteadminname;
    public $emailmethod;
    public $emailsmtphost;
    public $emailsmtpuser;
    public $emailsmtppassword;
    public $emailsmtpssl;
    public $emailsmtpdebug;
    public $maxemails;

    /**
     * These are on the bounce tab.
     */
    public $siteadminbounce;
    public $bounceaccounttype;
    public $bounceaccounthost;
    public $bounceaccountuser;
    public $bounceaccountpass;
    public $bounceencryption;

    /**
     * These are on the security tab.
     */
    public $surveyPreview_require_Auth;
    public $filterxsshtml;
    public $usercontrolSameGroupPolicy;
    public $force_ssl;

    /**
     * Interfaces tab.
     */
    public $RPCInterface;
    public $rpc_publish_api;

    /**
     * Languages tab.
     */
    public $defaultlang;
    public $disabledLanguages;

    /**
     * Presentation tab.
     */
    public $shownoanswer;
    public $repeatheadings;
    public $showxquestions;
    public $showgroupinfo;
    public $showqnumcode;
    public $pdffontsize;
    public $pdfshowheader;
    public $pdflogowidth;
    public $pdfheadertitle;
    public $pdfheaderstring;
    
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->load();
    }


    public function attributeLabels()
    {
        return [
            // General tab.
            'sitename' => gT("Site name"),
            'defaulttemplate' => gT('Default template'),
            'defaultquestionselectormode' => gT('Question type selector'),
            'defaulttemplateeditormode' => gT('Template editor'),
            'defaulthtmleditormode' => gT('Default HTML editor mode'),
            'admintheme' => gT('Administration template'),
            'GeoNamesUsername' => gT('GeoNames username for API'),
            'googleMapsAPIKey' => gT('Google Maps API key'),
            'ipInfoDbAPIKey' => gT('IP Info DB API Key'),
            'googleanalyticsapikey', gT('Google Analytics API key'),
            'googletranslateapikey' => gT('Google Translate API key'),
            'iSessionExpirationTime' => gT('Session lifetime for surveys (seconds)'),

            // Email settings.
            'siteadminemail' => gt("Default site admin email"),
            'siteadminname' => gt("Administrator name"),
            'emailmethod' => gt("Email method"),
            'emailsmtphost' => gt("SMTP host"),
            'emailsmtpuser' => gt("SMTP username"),
            'emailsmtppassword' => gt("SMTP password"),
            'emailsmtpssl' => gt("SMTP SSL/TLS"),
            'emailsmtpdebug' => gt("SMTP debug mode"),
            'maxemails' =>gt("Email batch size"),

            // Bounce settings
            'siteadminbounce' => gT("Default site bounce email"),
            'bounceaccounttype' =>  gT("Server type"),
            'bounceaccounthost' => gT("Server name & port"),
            'bounceaccountuser' => gT("Bounce account user"),
            'bounceaccountpass' => gT("Bounce account password"),
            'bounceencryption' => gT("Encryption type"),
            
            // Security
            'surveyPreview_require_Auth' => gt("Survey preview only for administration users"),
            'filterxsshtml' => gt("Survey preview only for administration users"),
            'usercontrolSameGroupPolicy' => gt("Group member can only see own group"),
            'force_ssl' => gt("Force HTTPS"),

            // Interfaces
            'RPCInterface' => gT("RPC interface enabled"),
            'RPCurl' => gt("URL of API"),
            'rpc_publish_api' => gT("Publish API on /admin/remotecontrol"),

            // Language
            'defaultlang' => gT("Default site language"),
            'disabledLanguages' => gT("Disabled languages"),

            // Presentation
            'shownoanswer' => gT("Show 'no answer' option for non-mandatory questions"),
            'repeatheadings' => gT("Repeating headings in array questions every X subquestions"),
            'showxquestions' => gT('Show "There are X questions in this survey"'),
            'showgroupinfo' => gT('Show question group name and/or description'),
            'showqnumcode' => gT('Show question number and/or question code'),
            'pdffontsize' => gT("Font size of answers export PDFs"),
            'pdfshowheader' => gT("Show header in answers export PDFs?"),
            'pdflogowidth' => gT("Width of PDF header logo"),
            'pdfheadertitle' => gT("PDF header title (if empty, site name will be used)"),
            'pdfheaderstring' => gT("PDF header string (if empty, survey name will be used)")

        ];
    }

    public function getRPCurl() {
        return App()->createAbsoluteUrl("admin/remotecontrol");
    }
    public function save($runValidation = true)
    {
        /**
         * Update inside transaction.
         */
        $transaction = App()->db->beginTransaction();
        $success = true;
        foreach($this->attributes as $name => $value) {
            $success = $success && \SettingGlobal::set($name, $value);
        }
        if ($success) {
            $transaction->commit();
        } else {
            $transaction->rollback();
        }
        return $success;
    }

    /**
     * Define validation rules here.
     * @return array
     */
    public function rules()
    {
        /**
         * @todo Implement proper validation.
         */
        return [
            [$this->attributeNames(), 'safe']
        ];
    }


    protected function load()
    {
        foreach ($this->attributeNames() as $attributeName) {
            $this->$attributeName = \SettingGlobal::get($attributeName, App()->getConfig($attributeName));
        }
    }


    public function getDefaultTemplateOptions()
    {
        $values = \Template::getTemplateList();
        return array_combine($values, $values);
    }

    public function getAdminThemeOptions()
    {
        return App()->themeManager->getThemeNames();
    }

    public function getDefaultHtmlEditorModeOptions()
    {
        return [
            'none' => gT("No HTML editor"),
            'inline' => gT("Inline HTML editor (default)"),
            'popup' => gT("Popup HTML editor")
        ];
    }

    public function getDefaultQuestionSelectorModeOptions()
    {
        return [
            'default' => gT("Full selector (default)"),
            'none' => gT("Simple selector"),
        ];
    }

    public function getDefaultTemplateEditorModeOptions()
    {
        return [
            'default'=>gT("Full template editor (default)"),
            'none'=>gT("Simple template editor"),
        ];
    }

    public function getEmailMethodOptions() {
        return [
            'mail' => gT("PHP (default)"),
            'smtp' => gT("SMTP"),
            'sendmail' => gT("Sendmail"),
            'qmail' => gT("Qmail"),
        ];
    }

    public function getEmailSmtpSslOptions() {
        return [
            '' => gT("Off"),
            'ssl' => gT("SSL"),
            'tls' => gT("TLS")
        ];
    }

    public function getEmailSmtpDebugOptions() {
        return [
            gT("Off"),
            gT("On errors"),
            gT("Always")
        ];
    }

    public function getBounceAccountTypeOptions() {
        return array('off'=>gT("Off"),'IMAP'=>gT("IMAP"),'POP'=>gT("POP"));
    }

    public function getForceSslOptions() {
        return array('neither'=>gT("Don't force on or off"),'on'=>gT("On"),'off'=>gT('Off'));
    }

    public function getRpcInterfaceOptions() {
        return array('off'=>gT("Off"),'json'=>gT("JSON-RPC"),'xml'=>gT("XML-RPC"));
    }

    public function getYesNoAdminOptions() {
        return array("1"=>gT('Yes'),"0"=>gT('No'),"2"=>gT('Survey admin can choose'));
    }

    public function getShowHideChooseOptions() {
        return array('choose'=>gT('Survey admin can choose'),'show'=>gT('Yes'),'hide'=>gT('No'));
    }

    public function getShowQuestionCodeOptions() {
        return array('choose'=>gT('Survey admin can choose'),'show'=>gT('Show both'),'number'=>gT('Show question number only'),'code'=>gT('Show question code only'),'none'=>gT('Hide both'));
    }

    public function getShowGroupInfoOptions() {
        return array('choose'=>gT('Survey admin can choose'),'show'=>gT('Show both'),'name'=>gT('Show group name only'),'description'=>gT('Show group description only'),'none'=>gT('Hide both'));
    }


}