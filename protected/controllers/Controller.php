<?php
/*
 * LimeSurvey
 * Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz
 * All rights reserved.
 * License: GNU/GPL License v2 or later, see LICENSE.php
 * LimeSurvey is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 * See COPYRIGHT.php for copyright notices and details.
 *
 */

namespace ls\controllers;
use ls\controllers\surveys\Index;
use \Yii;
abstract class Controller extends \CController
{
    /**
     * @var Array of active menus, keys are the menu names, values will be passed to the view.
     */
    public $menus = [];

    /**
     * This array contains the survey / group / question id used by the menu widget.
     * @var array
     */
    public $navData = [];
    /**
     * Basic initialiser to the base controller class
     *
     * @access public
     * @param string $id
     * @param CWebModule $module
     * @return void
     */
    public function __construct($id, $module = null)
    {
        parent::__construct($id, $module);

        Yii::app()->session->init();
        $this->_init();
    }

    public function accessRules() {
        return array_merge([
            ['allow', 'roles' => ['superadmin']],
            ['deny']
        ], parent::accessRules());
    }


    protected function _init()
    {
        enforceSSLMode();// This really should be at the top but for it to utilise \ls\models\SettingGlobal::get() it has to be here


        //SET LOCAL TIME
        $timeadjust = Yii::app()->getConfig("timeadjust");
        if (substr($timeadjust,0,1)!='-' && substr($timeadjust,0,1)!='+') {$timeadjust='+'.$timeadjust;}
        if (strpos($timeadjust,'hours')===false && strpos($timeadjust,'minutes')===false && strpos($timeadjust,'days')===false)
        {
            Yii::app()->setConfig("timeadjust",$timeadjust.' hours');
        }

        Yii::app()->setConfig('adminimageurl', App()->theme->baseUrl. '/images/');
        Yii::app()->setConfig('adminstyleurl', App()->publicUrl . '/styles/gringegreen/');
    }

    /**
     * Base implementation for load model.
     * Should be overwritten if the model for the controller is not standard or
     * has no single PK.
     * @param int $id
     * @return \CModel
     * @throws \CHttpException
     */
    public function loadModel($id) {
        // Get the model name.
        $modelClass = substr(get_class($this), 0, -strlen('sController'));
        if (class_exists($modelClass)) {
            $model = $modelClass::model()->findByPk($id);
            if (!isset($model)) {
                throw new \CHttpException(404, $modelClass . " not found.");
            }
            return $model;
        } else {
            throw new \Exception("Override loadModel when using a non standard class.");
        }

    }

    public function getActionParams()
    {
        $psr7 = App()->request->psr7;

        return array_merge($psr7->getQueryParams(), $psr7->getParsedBody());
    }


    /**
     * Render as json when ajax request AND preferred response type is json.
     */
    public function render($view, $data = null, $return = false)
    {
        if (App()->request->isAjaxRequest
            && App()->request->preferredAcceptType['type'] == 'application'
            && App()->request->preferredAcceptType['subType'] == 'json'
        ) {
            $json = [
                'data' => $data,
                'alerts' => App()->user->getFlashes()
            ];
            echo json_encode($json, JSON_PRETTY_PRINT);
        } else {
            return parent::render($view, $data, $return); // TODO: Change the autogenerated stub
        }
    }

    public function filters() {
        return ['accessControl'];
    }

    /**
     * Adds support for creating an action using PSR4 autoloading.
     *
     */
    protected function createActionFromMap($actionMap, $actionID, $requestActionID, $config = [])
    {
        $result = parent::createActionFromMap($actionMap, $actionID, $requestActionID, $config);
        if (!isset($result)) {
            $class = __NAMESPACE__ . "\\{$this->id}\\" . ucfirst($actionID);
            if (class_exists($class)) {
                $result = Yii::createComponent(['class' => $class], $this, $requestActionID);
            }

        }
        return $result;
    }


}
